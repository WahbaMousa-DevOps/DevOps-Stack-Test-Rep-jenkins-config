services:
  # Jenkins Master (jenkins)
  # Purpose: Jenkins controller/master, Manages all CI/CD jobs, pipelines, and agents.
  # Key Features:
  # Ports: 8080: Jenkins UI, 50000: JNLP (agent communication)
  # Volumes: jenkins_home: persistent Jenkins data, jcasc: Configuration as Code folder, /var/run/docker.sock: Enables Jenkins to run Docker commands inside jobs
  # Environment: Runs with JCasC preloaded to auto-configure Jenkins on startup
  # Healthcheck: Ensures Jenkins is healthy before agents connect
  # Restart policy: Resilient (unless-stopped)
  # This is the brain of your Jenkins system. It does not build â€” only schedules.
  jenkins:
    image: jenkins/jenkins:lts-jdk17
    container_name: jenkins-master
    user: root  # For initial setup only - consider switching to non-root in production
    ports:
      - "8080:8080"  # Jenkins UI
      - "50000:50000"  # Jenkins agent communication
    environment:
      - JAVA_OPTS=-Djenkins.install.runSetupWizard=false -Dcasc.jenkins.config=/var/jenkins_home/casc_configs
      - JENKINS_OPTS=--prefix=/jenkins
      - TZ=UTC

      # ðŸ”§ Dynamic Environment Settings (read from .env file)
      - JENKINS_ENV=${JENKINS_ENV}            # dev or prod
      - JENKINS_EXECUTORS=${JENKINS_EXECUTORS}  # 1 for dev, 0 for prod
      - JENKINS_SIGNUP=${JENKINS_SIGNUP}        # true for dev, false for prod
      - BACKUP_CLEANUP_DAYS=${BACKUP_CLEANUP_DAYS}  # 15 for dev, 90 for prod

    volumes:
      - jenkins_home:/var/jenkins_home
      - ./jcasc:/var/jenkins_home/casc_configs
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - jenkins-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/jenkins/login"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Java Agent 
  # Purpose: Custom Java-capable Jenkins build agent, Compiles and packages Java apps in CI/CD pipelines.
  # Built from: ./agents/java/Dockerfile â€” installs JDK + Gradle + Docker CLI
  # Environment: JENKINS_URL: Jenkins master address, JENKINS_AGENT_NAME: Custom agent name in Jenkins, JENKINS_SECRET: Dynamic token for secure connection (from JCasC), JENKINS_AGENT_WORKDIR: Agent workspace path
  # Volumes: java_agent_home: persistent agent workspace, Docker socket (for building images if needed)
  # This agent registers itself to the master via inbound JNLP and handles Java jobs only.
  java-agent:
    build:
      context: ./agents/java
      dockerfile: Dockerfile
    container_name: jenkins-java-agent
    environment:
      - JENKINS_URL=http://jenkins-master:8080/jenkins
      - JENKINS_AGENT_NAME=java-agent
      - JENKINS_SECRET=${JENKINS_JAVA_AGENT_SECRET} # for agent authentication
      - JENKINS_AGENT_WORKDIR=/home/jenkins/agent
    volumes:
      - java_agent_home:/home/jenkins/agent
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - jenkins-net
    depends_on:
      - jenkins
    restart: unless-stopped

  # .NET Agent
  # Purpose: Custom .NET-capable Jenkins build agent, Builds and publishes .NET apps using dotnet-sdk
  # Built from: ./agents/dotnet/Dockerfile â€” installs .NET SDK 8.0
  # Environment: Same structure as Java agent (JENKINS_URL, SECRET, etc.)
  # Volumes: dotnet_agent_home: persistent workspace, Docker socket (to support container builds)
  # This agent is used only for .NET pipelines. Clean, isolated, and secure.
  dotnet-agent:
    build:
      context: ./agents/dotnet
      dockerfile: Dockerfile
    container_name: jenkins-dotnet-agent
    environment:
      - JENKINS_URL=http://jenkins-master:8080/jenkins
      - JENKINS_AGENT_NAME=dotnet-agent
      - JENKINS_SECRET=${JENKINS_DOTNET_AGENT_SECRET}
      - JENKINS_AGENT_WORKDIR=/home/jenkins/agent
    volumes:
      - dotnet_agent_home:/home/jenkins/agent
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - jenkins-net
    depends_on:
      - jenkins
    restart: unless-stopped

# Shared Volumes
# Purpose: Persist Jenkins data and agent workspace, Avoids losing job history or workspace files when containers restart
volumes:
  jenkins_home:
  java_agent_home:
  dotnet_agent_home:

# Shared Network
# Purpose: Allows containers (master â†” agents) to communicate privately, Simplifies hostname-based discovery (e.g., jenkins-master:8080)
networks:
  jenkins-net:
    driver: bridge
