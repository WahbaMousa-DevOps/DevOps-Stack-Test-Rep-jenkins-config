# CI Stage: Pushes image to Docker Hub

# ============================================
# ðŸ“¦ docker-compose.yml (Dev + Jenkins Stack)
# Location: config-jenkins-repo/
# Purpose: Used during CI builds â€” launches Jenkins master, agents, and app services.
# Runs locally inside your Jenkins VM "Sets up a full Jenkins CI stack with a jenkins-master container, configured via JCasC and health-checked on /jenkins/login."
# Builds images (if needed) "Builds and connects two Jenkins agents (java-agent and dotnet-agent) from custom Dockerfiles, each authenticated using environment secrets."
# Stores images and volumes in Docker Engine local storage "Builds and runs a C# web app (csharp-app) using the RUNTIME_IMAGE passed via .env, exposing it on port 8080 and checking health via /health." "Builds and runs a Java web app (java-app), exposing it on port 9090 and running a basic health check via a Java Main class."
# Brings up containers connected via internal Docker bridge network (jenkins-net) "Connects all services through a shared jenkins-net bridge network, and persists data using named volumes for Jenkins and each agent's work directory."
# ============================================

version: '3.8'

services:
  jenkins:
    image: jenkins/jenkins:lts-jdk17
    container_name: jenkins-master
    user: root # You want to give Jenkins container permissions to: Mount /var/run/docker.sock and Modify plugins and volumes. but Inside Jenkins itself, it still uses the jenkins user for runtime security. This is normal and safe in CI systems.
    ports:
      - "8080:8080"
      - "50000:50000"
    environment:
      - JAVA_OPTS=-Djenkins.install.runSetupWizard=false -Dcasc.jenkins.config=/var/jenkins_home/casc_configs # Passes JVM options to disable setup wizard and point to JCasC config folder
      - JENKINS_OPTS=--prefix=/jenkins # Tells Jenkins to serve under /jenkins instead of root /. This tells Jenkins to: Serve UI at http://localhost:8080/jenkins instead of / Useful if your reverse proxy (Nginx, Traefik) needs a path prefix like /jenkins or You want to host multiple apps on same domain
      - TZ=UTC # Sets timezone
      - JENKINS_ENV=dev # Used to load env-specific config (visible in UI/systemMessage). a custom variable you define. Used in: systemMessage in JCasC to show current env or Logging or Conditional behavior in your pipelines or tools. You can set it in .env, Jenkinsfiles, or Compose.
      - JENKINS_EXECUTORS=1 # How many executors (parallel jobs) run on master (0 in prod). How many builds Jenkins master itself can run. Prod `0` â†’ Master only manages agents. Dev `1+` â†’ Allows building on master (quick test/dev). In real CD (on Kubernetes), Jenkins master should NEVER build anything â€” all builds should happen on agents.
      - JENKINS_SIGNUP=true # Enable/disable user sign-up
      - BACKUP_CLEANUP_DAYS=15 # Used in JCasC for ThinBackup retention logic
    volumes:
      - jenkins_home:/var/jenkins_home # jenkins_home is a named Docker volume used to persist all Jenkins state (jobs, plugins, builds, config, credentials, etc.). â†’ Persistent Jenkins data (jobs, plugins, config)
      - ./jcasc:/var/jenkins_home/casc_configs # Bind mount â†’ Mounts your JCasC config from repo into container
      - /var/run/docker.sock:/var/run/docker.sock # Bind mount â†’ Gives Jenkins access to host Docker (build containers). Security-sensitive file: must be mounted only by CI agents
    networks:
      - jenkins-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/jenkins/login"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  java-agent:
    build:
      context: ./agents/java
      dockerfile: Dockerfile
    container_name: jenkins-java-agent
    environment:
      - JENKINS_URL=http://jenkins-master:8080/jenkins # Jenkins master endpoint for the agent to register. Used by agents to register with the master. Must point to the same URL served by Jenkins (matches JENKINS_OPTS). In Docker Compose, jenkins-master is the container name, and Composeâ€™s DNS will resolve it internally.
      - JENKINS_AGENT_NAME=java-agent # Unique name used for that agent
      - JENKINS_SECRET=${JENKINS_JAVA_AGENT_SECRET} # Token from Jenkins master to authenticate agent. This is a secret string used to connect the agent to the master. Itâ€™s generated by Jenkins master automatically when you configure a static agent via JCasC or UI.
      - JENKINS_AGENT_WORKDIR=/home/jenkins/agent # Directory inside the container used for builds
    volumes:
      - java_agent_home:/home/jenkins/agent # Named volume for agent work directory â€” persists across runs
      - /var/run/docker.sock:/var/run/docker.sock # Allows agents to run Docker commands on host (needed for CI jobs)
    networks:
      - jenkins-net
    depends_on:
      - jenkins
    restart: unless-stopped

  dotnet-agent:
    build:
      context: ./agents/dotnet
      dockerfile: Dockerfile
    container_name: jenkins-dotnet-agent
    environment:
      - JENKINS_URL=http://jenkins-master:8080/jenkins
      - JENKINS_AGENT_NAME=dotnet-agent
      - JENKINS_SECRET=${JENKINS_DOTNET_AGENT_SECRET}
      - JENKINS_AGENT_WORKDIR=/home/jenkins/agent
    volumes:
      - dotnet_agent_home:/home/jenkins/agent
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - jenkins-net
    depends_on:
      - jenkins
    restart: unless-stopped

  nodejs-agent:
    build:
      context: .
      dockerfile: agent/node.js/Dockerfile
    container_name: jenkins-nodejs-agent
    environment:
      - JENKINS_URL=http://jenkins-master:8080/jenkins
      - JENKINS_AGENT_NAME=nodejs-agent
      - JENKINS_SECRET=${JENKINS_NODEJS_AGENT_SECRET}
      - JENKINS_AGENT_WORKDIR=/home/jenkins/agent
    volumes:
      - nodejs_agent_home:/home/jenkins/agent
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - jenkins-net
    depends_on:
      - jenkins
    restart: unless-stopped

  csharp-app:
    build:
      context: ../csharp-app-repo
      dockerfile: Dockerfile
      args:
        RUNTIME_IMAGE: ${PROD_RUNTIME_IMAGE}
    ports:
      - "8080:80"
    environment:
      - ASPNETCORE_URLS=http://0.0.0.0:80 # Tells .NET to listen on port 80
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - jenkins-net

  java-app:
    build:
      context: ../java-app-repo
      dockerfile: Dockerfile
    ports:
      - "9090:8080"
    healthcheck:
      test: ["CMD", "java", "-cp", ".", "Main"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - jenkins-net

  nodejs-dev:
    build:
      context: ../nodejs-app
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ../nodejs-app:/app
    environment:
      - NODE_ENV=development # Enables dev mode (debugging, logging, etc.)
    networks:
      - jenkins-net
    restart: unless-stopped



volumes:
  jenkins_home:
  java_agent_home:
  dotnet_agent_home:
  nodejs_agent_home:

networks:
  jenkins-net:
    driver: bridge

